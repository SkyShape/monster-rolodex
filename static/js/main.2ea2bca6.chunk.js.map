{"version":3,"sources":["components/CardType.js","components/CardList.js","components/SearchBox.js","App.js","reportWebVitals.js","index.js"],"names":["CardType","monster","className","src","id","alt","name","email","CardList","props","monsters","map","SearchBox","placeholder","handleChange","type","onChange","App","e","setState","searchField","target","value","state","fetch","then","response","json","users","this","filterMonsters","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uUAaeA,EAVE,SAAC,GAAe,IAAdC,EAAa,EAAbA,QACf,OACI,sBAAKC,UAAU,iBAAf,UACI,qBAAKC,IAAG,+BAA0BF,EAAQG,GAAlC,0BAA8DC,IAAI,YAC1E,6BAAKJ,EAAQK,OACb,4BAAIL,EAAQM,YCMTC,EAVE,SAACC,GACd,OACI,qBAAKP,UAAW,YAAhB,SACKO,EAAMC,SAASC,KAAI,SAAAV,GAAO,OACvB,cAAE,EAAF,CAA4BA,QAASA,GAArBA,EAAQG,UCEzBQ,G,MAPG,SAAC,GAAiC,IAAhCC,EAA+B,EAA/BA,YAAaC,EAAkB,EAAlBA,aAC7B,OACI,uBAAOZ,UAAU,SAASa,KAAK,SAASF,YAAaA,EAAaG,SAAUF,MCqCrEG,E,kDArCb,aAAc,IAAD,8BACX,gBAcFH,aAAe,SAACI,GACd,EAAKC,SAAS,CAACC,YAAaF,EAAEG,OAAOC,SAbrC,EAAKC,MAAQ,CACXb,SAAU,GACVU,YAAa,IALJ,E,qDASb,WAAqB,IAAD,OAClBI,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAACT,SAAUkB,S,oBAQ1C,WAAU,IAAD,EACyBC,KAAKN,MAA9Bb,EADA,EACAA,SAAUU,EADV,EACUA,YACXU,EAAiBpB,EAASqB,QAAO,SAAA9B,GAAO,OAAIA,EAAQK,KAAK0B,cAAcC,SAASb,EAAYY,kBAElG,OACE,sBAAK9B,UAAU,MAAf,UACE,iDACA,cAAE,EAAF,CACEW,YAAY,kBACZC,aAAgBe,KAAKf,eAEvB,cAAE,EAAF,CAAWJ,SAAUoB,W,GAhCXI,aCQHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.2ea2bca6.chunk.js","sourcesContent":["import React from 'react';\r\nimport './CardType.css';\r\n\r\nconst CardType = ({monster}) => {\r\n    return (\r\n        <div className=\"card-container\">\r\n            <img src={`https://robohash.org/${monster.id}?set=set2&size=180x180`} alt=\"monster\" />\r\n            <h2>{monster.name}</h2>\r\n            <p>{monster.email}</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CardType;\r\n","import React from 'react';\r\nimport './CardList.css';\r\nimport CardType from './CardType';\r\n\r\nconst CardList = (props) => {\r\n    return (\r\n        <div className= \"card-list\">\r\n            {props.monsters.map(monster => (\r\n                < CardType key={monster.id} monster={monster}/>\r\n            ))}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CardList;\r\n","import React from 'react';\r\nimport './SearchBox.css';\r\n\r\nconst SearchBox = ({placeholder, handleChange}) => {\r\n    return (\r\n        <input className=\"search\" type=\"search\" placeholder={placeholder} onChange={handleChange}\r\n        />\r\n    )\r\n}\r\n\r\nexport default SearchBox;\r\n","import './App.css';\nimport React, { Component } from 'react';\nimport CardList from './components/CardList';\nimport SearchBox from './components/SearchBox';\nclass App extends Component {\n  constructor(){\n    super();\n\n    this.state = {\n      monsters: [],\n      searchField: ''\n    };\n  }\n\n  componentDidMount() {\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response => response.json())\n    .then(users => this.setState({monsters: users}));\n  }\n\n  handleChange = (e) => {\n    this.setState({searchField: e.target.value});\n  }\n  \n\n  render() {\n    const {monsters, searchField} = this.state;\n    const filterMonsters = monsters.filter(monster => monster.name.toLowerCase().includes(searchField.toLowerCase()));\n\n    return (\n      <div className=\"App\">\n        <h1>Monster Rolodex</h1>\n        < SearchBox \n          placeholder='Search Monsters'\n          handleChange = {this.handleChange}\n        />\n        < CardList monsters={filterMonsters} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}